MACRO
	1. Local MACRO
	프로그램에서 같은 구문을 여러 번 사용해야 한다면, MACRO에 포함하는 것이 바람직하다. 프로그램 선언부에 DEFINE ~ END-OF-DEFINITION을 선언하고 나서
	MACRO이름과 파라미터로 호출하면 된다. PERFORM 구문이 로직에 포함된 재사용 모듈이라면, MACRO는 단순한 코딩 반복을 감소하려는 것이라고 할 수 있다.
	
	DEFINE macro.
	~~~
	END-OF-DEFINITION.
	
	매크로 코드에서 &1, &2, &3, &4는 매크로에서 변수값을 받는 파라미터이며, 총 9개의 파라미터를 설정할 수 있다.
	매크로는 자기 자신을 호출할 수 없다.
	
	매크로 코딩 실습
	DATA: gv_val1 TYPE c VALUE 'A',
      gv_val2 TYPE c VALUE 'B',
      gv_val3 TYPE char3.

	  DEFINE con.
	  CONCATENATE &1 &2 INTO &3 SEPARATED BY space.
	  dis &3.
	  end-OF-DEFINITION.

	  DEFINE dis.

      WRITE &1.
	  end-OF-DEFINITION.

	  con gv_val1 gv_val2 gv_val3.
	  
	2. Global MACRO
		일반적으로 Macro를 쓸 때 프로그램 내에서 DEFINE ... END-OF-DEFINITION을 사용한다.
		이처럼 Local Macro를 사용하면 다른 프로그램에서는 호출할 수 없다는 단점이 있다.
		Global Macro를 생성하면 모든 프로그램에서 사용할 수 있다. Global Macro를 사용하려면 TRMAC 테이블을 유지보수하면 된다.
		
		자주 사용하는 Global Macro는 BreackPoint를 지정하는 BREAK 구문이다. TRMAC 테이블에 존재하는 데이터에서 알 수 있듯이 프로그램에서 BREAK를 입력하면
		이 MACRO를 호출하게 된다.