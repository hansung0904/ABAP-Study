Data Type
	TYPES dtype [TYPE type | LIKE dobj]

Data variable
	DATA var [TYPE type | LIKE dobj]

프로그램 내에 Data Type 또는 Data Variable을 선언하게 된다.
Table(Table Filed)	Data Type	Data Element	Structure	Table Type

TYPES : types TYPE table.
DATA : gv_data LIKE table-field

Type Groupd을 선언하여 TYPE을 그룹화하여 사용할 수 있다.
	TYPE-POOLS hktst...


Data Variable 선언
	1) Predefined ABAP Type 이용해서 변수 선언
	ABAP에서 지공되는 기본 타입을 이용하여 데이터를 선언하는 방식

	DATA : gv_num	TYPE i
		 gv_date	TYPE f,		-> Predefined ABAP TYPE
		 gv_time	TYPE d,

	2) 프로그램의 Local Type을 이용해서 변수 선언
	Local 프로그램에서 자주 사용하게 되는 데이터 및 구조를 TYPE으로 선언하여, 프로그램 내에서만 ABAP
	기본 데이터 타입처럼 사용할 수 있다.

	TYPES : BEGIN OF t_struct,
		col1 TYPE c,
		col2 TYPE i,			-> Local TYPE 선언
		col3 TYPE d,
		END OF t_struct.

	DATA : gs_sturct TYPE t_struct,
			gv_var	LIKE gs_struct-coll.
	
	3)  ABAP Dictionary의 Type을 이용해서 변수 선언
		ABAP Dictionary(Table, Structrue, Data Element 등)는 모든 프로그램에서 선언하여 사용할 수 있다.
		
			DATA : gv_carrid 	TYPE s_carr_id,
				gv_connid		TYPE sflight-carrid
				gv_matnrq		TYPE mara-matnr.
	
DATA 구문
		데이터 변수를 선언할 때 사용하는 구문이다. 변수명은 언더라인 기호를 포함해서 30자까지 가능하다.
		
		1) TYPE type
			데이터 변수의 타입을 정의한다. 3가지 타입 유형이 TYPE 구문 다음에 올 수 있다.
			Ex) DATA : gv_num		TYPE i.
			
		콜론(:) 기호는 동일한 명령어를 쉼표(,)로 구분하며 마침표(.)를 만날 때까지 실행하도록 한다.
		명령어를 수행하고 동일한 기능을 여러 번 실행할 수 있도록 해준다.
		
		Ex)
		DATA gv_num TYPE I, 	->	DATA : gv_num1 TYPE I,
		DATA gv_numb TYPE I. 	->		   gv_num2 TYPE I
		
		2) LIKE num
			앞에서 생성한 Data Variable인 gv_num1과 동일한타입의 변수를 선언할 때 사용된다.
			타입이 있는 모든 데이터 변수(Field, Parameter, Structure, 시스템 변수..)를 사용할 수 있다.
			
				DATA : gv_num2 		LIKE gv_num1
		
		3) VALUE int	
			모든 데이터 타입은 Initial Value가 존재한다. 
			DATA 구문을 사용할 댸 VALUE 옵션을 사용하면 기본 Initial Value 대신에 int로 초깃값을 설정한다.
			VALUE IS INITIAL 구문을 사용하면 Data Type의 Initial Value로 지정된다. (생략가능)
			Constants 변수를 선언할 때에는 VALUE 옵션은 필수 사항이다.
			
				DATA : gv_num	TYPE i		VALUE 123,
								gv_flag		VALUE X,
								gv_val		VALUE IS INITIAL,
								gv_idx		LIKE sy-tabix			VALUE 45.
	
		4) LENGTH n
			필드의 길이를 설정한다. C, N, P, X 타입에만 사용할 수 있다.
				
				DATA : gv_num		TYPE p		LENGTH 2.
			
		5) DECIMALS n
			Data Type P에서만 사용 가능 1~14 사이의 소수 자리 수를 설정한다.
			
				DATA : gv_num		TYPE p		DECIMALS 3.
				
		예제 2-1 실습
		REPORT Z02_01.
		TYPES t_var TYPE c LENGTH 20.
		DATA gv_var TYPE t_var.
		gv_var = "Hello ABAP". -> single coarctation으로 처리해주어야 하는가? ANS -> ABAP 에서 double coarctation은 " 뒷부분의 문자열을 주석처리해버림
		WRITE gv_var.
		
		코드설명 : t_var라는 Local Type 선언하고 이 타입 참조해서 gv_var라는 DATA Variable을 선언
				ABAP 프로그램 내에 자주 사용되는 TYPE이라면 Local Type을 정의하는 것이 효율적임
				Local Type을 항상 먼저 선언할 필요는 없으며 다음 구문과 같이 변수를 선언할 때 바로 TYPE을 지정해 줄 수 있다.
				
					DATA gv_var TYPE c LENGTH 20.
					
		ABAP 기본 문법
			1.	ABAP 프로그램의 한 문장은 마침표 기호(.)로 마무리 한다.
				WRITE gv_val.
				
			2. 프로그램 기능을 설명하는 주석은 2가지가 존재한다.
				* 기호는 한라인 전체를 주석
				* This line is comment
				
				" 기호는 뒷부분의 문자열을 주석 처리한다.
				WRITE gv_val. "Part of line is comment.
			
			3. 문자열은 ' ' 기호로 처리한다.
				gv_val = 'Easy ABAP'.
				
			4. 명령어는 공백(SPACE)을 두고 처리한다.	
				gv_val='Easy ABAP'. => 틀린 예시
				gv_val = 'Easy ABAP'. =>  올바른 예시
				
ABAP Naming Rule
	SAP 에서는 고객사에서 사용할 수 있는 ABAP Dictionary의 Naming Rule은 'Z' 또는 'Y'로 시작하는 것을 기본으로 하고 있다.
	INSERT/APPEND와 같은 Keyword는 사용할 수 없도록 하는 필수적인 사항이 있다.
	
	네이밍 룰 
		범위(전역/로컬)			데이터 유형(변수/구조)		-				의미 요약
		Prefix 1			Prefix 2				Separator		Summary
		
	사용 예
		G					S						-				SFLIGHT

	프로그래밍			
	DATA : GS_SFLIGHT TYPE SFLIGHT
	
전역 변수 정의 (Global Variable)
	전역 변수 = 하나의 프로그램 또는 함수 그룹 내에서 접근할 수 있는 데이터 유형을 의미
				프로그램 내 모든 영역에서 참조하고 변경할 수 있기 때문에 지역성 x
				프로그램이 활성화되어 있는 상태에서는 전역 변수는 항상 메모리를 점유하고 있다.
				
	전역 변수 정의는 G로 시작하게 되며 데이터 유형에 따라 다음과 같이 정의하여 사용한다.

	전역 변수 정의 표
	데이터 타입		접두어		사용 예		프로그램
	필드				V or D		GV_CARRID	DATA GV_SFLGIHT TYPE S_CARR_ID.
											DATA GD_SFLGIHT TYPE S_CARR_ID.
											
	구조체			S			GS_SFLIGHT	DATA GS_SFLIGHT TYPE SFLIGHT.
	상수				C			GC_RATE		CONSTANTS GC_RATE TYPE I VALUE '3.14'.
	인터널 테이블		T			GT_SFLIGHT	DATA GT_SFLIGHT TYPE TABLE OF SFLIGHT.
	클래스			O			GO_ALVGRID	DATA GO_ALVGRID TYPE REF TO CL_SALV_TABEL.
	RANGE			R			GR_CARRID	RANGES GR_CARRID FOR SFLIGHT-CARRID.
	데이터 참조 변수		F			GF_OBJ		DATA GF_OBJ TYPE REF TO OBJECT.
	
	전역 변수 Naming Rule을 좀 더 세부적으로 구분하여, 접두어(prefix)를 3자리로 사용할 수도 있다.
	접두어 1 -> 범위		접두어 2 -> 데이터 유형		접두어 3 -> 데이터 성격
	
지역 변수 정의 (Locla Variable)
	지역 변수는 프로그램의 모듈 내에서만 유효한 변수를 의미.
	모듈이란 말은 함수나 서브루틴같이 단위 기능을 구현하기 위해 스크립트를 그룹화한 것
	
	지역 변수 정의 표
	데이터 타입		접두어		사용 예		프로그램
	필드				V or D		LV_CARRID	DATA LV_SFLGIHT TYPE S_CARR_ID.
								또는
								LD_CARRID	DATA LD_SFLGIHT TYPE S_CARR_ID.
	구조체			S			LS_SFLIGHT	DATA LS_SFLIGHT TYPE SFLIGHT.
	상수				C			LC_RATE		CONSTANTS LC_RATE TYPE I VALUE '3.14'.
	인터널 테이블		T			LT_SFLIGHT	DATA LT_SFLIGHT TYPE TABLE OF SFLIGHT.
	클래스			O			LO_ALVGRID	DATA LO_ALVGRID TYPE REF TO CL_SALV_TABEL.
	RANGE			R			LR_CARRID	RANGES LR_CARRID FOR SFLIGHT-CARRID.
	데이터 참조 변수		F			LF_OBJ		DATA LF_OBJ TYPE REF TO OBJECT.
	
고정 길이를 가지는 기본 Predefined ABAP Type
	ABAP은 고정 길이를 가지는 8가지 기본 Data Type을 제공하고 있다.
	모든 필드 길이는 byte 단위로 구분된다.
	데이터 타입 D,F,I는 이미 기술적 속성이 정의되어 있어서 프로그램에서 필드 길이를 정의하지 않고 바로 사용할 수 있다.
	반면에 일반적인 데이터 탕비인 C, N, X를 사용할 때에는 필드 길이를 정의해야 한다.
	그리고 TYPE P는 DECIMALS를 명시하지 않으면 소수 자리를 인식하지 못한다.
	
		DATA gv_num TYPE I.		DATA gv_num TYPE p DECIMALS 2.
		
		기본 데이터 타입
		초기 길이				가능 길이			초깃값			의미
		Numeric Types		
		I		4			4				0				Integer (whole nubmer)
		F		8			8				0				Floatin point nubmer
		P		8			1-16			0				Packed	number
		
		Character Types
		C		1			1-65535			'...'			Text Field
		D		8				8			'00000000'		Date field (Format: YYYYMMDD)
		N		1			1-65535			'0...0'			Numberid text field (numeric characters)
		T		6				6			'000000'		(format:HHMMSS)
		
		Hexadecimal type
		X		1			1-65535			X'0......0'		Hexadecimal field
		
Numeric Data Type
	ABAP/4에서는 3가지 형태의 숫자 타입(Numeric Data Type)이 있다.
	
	1) Integers (whole nubmers) of Type I
	• 값의 범위는 -21억 ~ 21억 (대략)
	• 정수 타입만 지원
	• 정수가 아닌 것은 반올림
	• Counter, Item 수, Index 등에 쓰인다.
	
	2) Packed nubmers of Type P
	• 소수 자리를 허용
	• 가용 Size 1~16 Byte이며, 소수는 최대 14자리 설정 가능
	• 프로그램 속성 Setting 시 그림 2-13과 같이 Fixed point arithmetic을 체크해야 한다.
	• 정확한 계산을 요하는 Business Calculation 목적으로 사용된다.
	
	3) Floating point number of Type F
	• 지수(expoennt) 형태로 표현되므로 FLTP_CHAR-CONVERSION과 같은 Function Module을 이용해서 다른 데이터 타입으로 변화하여 출력한다.
	• Type F 는 내부적으로 Binary System으로 전환될 때 반올림 에러가 발생할 수 있다(Rough Calculation)
	• 높은 정확도를 요구한다면 Type P를 사용해야 하고, 매우 작거나 큰 수라면 Type F 사용을 권장한다.
	• Value 범위가 넓은 경우나, 반올림 오류가 중요한 사항이 아닐 경우에 Type F를 사용한다. --> 실수 값에 대한 근삿값을 가지는 타입이기 때문에 주의
	
	Numeric Data Type 함수
	
	함수		내역									사용 예
	ABS		절댓값 리턴							ABS(-100) return 100
	SIGN	부호에 대한 결과 리턴						마이너스 -1,
												0 -> 0,
												플러스 + 리턴
								
	CEIL	해당 값보다 작지 않은 가장 큰 정수 리턴		ceil(1.3), ceil(1.7) 둘다 2 return
	FLOOR	CEIL의 반대							floor(1.3), floor(1.7)은 둘다 1 return
	TRUNC 	소숫점 버리고 정수만 남김					trunc(1.3), trunc(1.7)은 둘다 1 return
	