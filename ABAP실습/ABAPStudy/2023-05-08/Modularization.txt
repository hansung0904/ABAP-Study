Subroutine
	Subroutine은 FORM으로 시작해서 END FORM으로 종료되는 구문을 의미
	스크립트의 모듈화, 재사용, 구조화를 주목적으로 한다.
	ABAP 프로그램에선 PERFORM 구문을 이용한 SUbroutine으로 유사한 기능을 제공한다.
	
	이외에 파라미터 값을 주고받을 수 있는 Function Module이 존재한다.
	C 언어에서는 함수, JAVA에서는 메서드를 사용해서 모듈화 및 재사용을 지원한다.
	C와 JAVA에서의 프로그램 시작점인 MAIN() 함수를 C언어에서는 함수라 명칭하고, JAVA에서는 메서드라 부른다.
	모듈화는 의미 있는 기능들을 모아 놓은 프로그램 블록을 의미
	재사용이 가능하다는 특성이 있어야 한다.
	스크립트가 너무 길어지면 유지보수하기가 어려워지므로, 재사용의 목적이 아니더라도 기능별로
	블록화해서 프로그램을 구조화하는 것이 바람직하다.
	
	실무에서 PERFORM 구문이 너무 많으면 속도 저하 ISSUE가 생기지 않을까 라는 걱정은 하지 않아도 된다
	속도와 관련된 대부분 문제는 적절하지 못한 SQL 문이나 적합하지 않은 Internal Table을 사용하기 때문에 발생한다.
	
	Subroutine은 FORM으로 시작해서 END FORM으로 종료되는 구문을 의미한다.
	
	PERFORM 구문으로 Subroutine을 호출하게 되면, FORM 구문을 수행하게 된다.
	Subroutine을 FORM 구문과 같은 것으로 간주하면 된다.
	FORM 구문은 프로그램 내외부 모두에서 호출 할 수 있다.
	
Subroutine 파라미터
	파라미터(Parameter)는 Subroutine을 호출하는 구문과 호출받는 구문 사이에 주고받는 값을 의미.
	Subroutine 내에서 파라미터는 DATA 구문으로 정의하는 일반적인 Local 변수와 같음.
	Subroutine을 호출할 때 사용되는 파라미터를 Actual Parameter라고 하고
	Subroutine에서 사용되는 파라미터를 Formal Parameter라고 정의한다.
	
	PERFORM의 USING, CHANGING 구문을 사용해서 파라미터를 선언하며 Subroutine과 그 순서를 같게 지정해야 한다.
	파라미터는 ABAP의 모든 기본 Data Type, Field Symbol, Internal Table등을 사용할 수 있다.
	
1 파라미터 전달 방법
	Subroutine은 Using과 Changing 구문으로 파라미터를 주고받게 되는데, 3가지 유형으로 분류된다.
	
	• Call by Value : 념거주는 변수와 받는 변수가 물리적으로 다른 메모리 영역을 가지고 있다.
	• Call by Reference : 물리적으로 같은 메모리 영역을 공유하여 넘겨주며 값은 주소이다.
	• Call by Value and Result : 변수의 값을 넘겨주고 받는 구문에서 작업을 성공적으로 수행하였을 경우 변경된 값을 돌려줌.
								 물리적으로는 다른 영역을 사용함.
								 
1.1 Call by Value
	Call by Value는 USING 키워드 다음에 파라미터를 사용하고, VALUE 구문으로 완성
	
		FORM subr USING .. VALUE(pi) [TYPE <t>|LIKE <f>].
	
	VALUE 구문에서 Formal Parameter는 자신의 메모리를 가짐.
	Subroutine을 호출할 때, Actual Parameter의 값은 Formal Parameter에 복사된다.
	하지만 Formal Parameter의 값이 변경되더라도 Actual Parameter에는 영향을 미치지 않는다.


1.2 Call by REference
	CHANGING 키워드 다음에 파라미터를 사용하면, Subroutine에 전달된 파라미터 값이 변경된다.
	
		FORM subr CHANGING ... pi [TYPE <t>|LIKE <f>]..
		
	Subroutine의 Formal Parameter는 자신의 메모리를 가지지 않는다. Subroutine이 호출되는 동안 Actual Parameter의 주솟값을 가지고 있을 뿐이다.
	즉 Subroutine을 호출한 프로그램의 메모리에서 작업하게 된다.
	
	
1.3 Call by Value and Result
	CHANGING 키워드 다음에 파라미터를 사용하고, VALUE 구문으로 완성한다.
	
	FORM subr CHANGING..VALUE(pi) [TYPE <t>|LIKE <f>].
	
	USING 구문과 VALUE 구문이 함께 사용되면 Subroutine 내에서 Actual Parameter 값을 변경할 수 업으나 CHANGING 구문과 VALUE 구문이 함께 사용되면
	Subroutine이 정상적으로 종료될 경우 Actual Parameter 값이 변경된다. 즉, CHANG-ING 구문은 항상 VALUE 구문과 함께 사용하는 것이 바람직하다.
	
2 파라미터 타입 정의
	FORM 구문 내의 Formal Parameter 는 TYPE과 LIKE 구문을 이용해서 모든 ABAP 데이터 타입을 사용할 수 있다. 타입을 명시적으로 지정하지 않으면,
	Generic Type으로 정의되고, Actual Parameter의 기술적 속성을 상속받게 된다. 이때는 Type Conversion이 가능한 타입을 사용해야한다.
	
	Formal Parameter 내에서 타입을 지정하지 않았기 때문에 Actual Parameter의 속성을 그대로 사용할 수 있었다. 이번에는 FORM 구문에서 파라미터 타입을
	지정해보도록하자.
	
3 파라미터와 구조체
	Formal Parameter는 모든 ABAP Data Type이 허용되기 때문에 구조체도 당연히 사용가능.
	구조체를 파라미터로 사용할 때는 TYPE, LIKE 뿐만 아니라 STRUCTURE 구문을 이용해서 구조체 타입을 정의할 수 있다.
	
		FORM subr USING p_str STRUCTURE str...
		FORM subr USING p_str TYPE str...
		FORM subr USING p_str LIKE str...
		
		만약에 구조체를 파라미터로 전달할 때 타입을 명시적으로 지정하지 않으면 어떻게 될까?
			구조체에 col1 칼럼이 없다는 에러가 발생한다.
			
		구조체를 전달할 때 타입을 지정하지 않아씅면 구조체 칼럼을 WRITE하거나 인식하려 할 때 필드 심볼을 이용해야 한다.
		
4 파라미터와 인터널 테이블
	4.1 USING, CHANGING 구문
	인터널 테이블을 Subroutine의 파라미터로 사용할 때도 USING, CHANGING 키워드를 사용할 수 있다.
	
	FORM subr CHANGING ... <itabi> [TYPE <t>|LIKE <f>] ...
	
	4.2 TABLES 구문
	TABLES 구문은 Rel 3.0 이전 버전에서 사용되는 것으로 USING과 CHANGING 구문 대신에 사용할 수 있다.
	예전에 개발된 프로그램은 TABLES 구문을 사용했기 때문에 호환성 문제로 현재도 많이 사용되어지고 있다.
	
	FORM subr TABLES ... <itabi> [TYPE <t>|LIKE <f>]...
	
	TABLES 구문을 이용해서 Formal Parameter를 정의하면 Call by value가 지원되지 않음.
	
Subroutine 호출
	Subrountine을 호출하는 방법에는 Internal, External 두 가지가 존재.
	PERFORM 구문을 이용해서 ABAP 프로그램 내에서 Subroutine을 호출할 수 있으며, 다른 ABAP 프로그램 내의 Subroutine도 호출해서 사용할 수 있다.
	
외부 Subroutine 호출
	ABAP 프로그램은 다른 포르그램의 Subroutine을 호출하여 사용할 수 있도록 지원한다.
	외부 프로그램을 호출할 때는 [IF FOUND] 구문을 사용해서, 해당 Subroutine이 존재하는지 체크하는 것이 바람직하다.
	체크하지 않았을 때 Subroutine이 존재하지 않으면 덤프 에러가 발생하기 때문이다.
	
	PERFORM subr(prog) [using p1 p2...]
			[CHANGING p1 p2 ...] [IF FOUND].
			
Subroutine 동적 호출
	3.1 Subroutine name 동적 지정
	외부 프로그램의 Subroutine을 호출할 경우 이름을 동적으로 지정할 수 있다.
	
	PERFORM (fsubr) [IN PROGRAM (fprog)] [USING p1 p2...]
							[CHANGING p1 p2 ...]
							[IF FOUND].
			
	Ex) Dynamic Call Code
	data :	gv_first(10) type c value 'Dynamic',
			gv_second(10) type c value 'CALL',
			gv_result(20) type c.
			
			data:	gv_pname(8) type c value 'Z04_09',
					gv_subname(20) type c value 'CONCATE_STRING'.
					
	TRANSLATE GV_PNAME TO UPPER CASE.

	PERFORM (gv_subname) IN PROGRAM (gv_pname) IF FOUND
			USING gv_first gv_second
			CHANGING gv_result.
			
LIST를 이용한 Subroutine 호출
다음 구문과 같이 LIST를 이용해 Subroutine을 차례대로 호출할 수 있다.

	PERFORM idx OF subr1 subr2 ... subrn.
	
Subroutine 종료
	Subroutine은 END FORM. 구문을 만나게 되면 정상적으로 종료된다. 그러나 EXIT, CHECK 구문을 활용해서
	Subroutine 수행 중에 종료가 가능하다 EXIT 구문을 만나게 되면 바로 Subroutine을 빠져나오고 CHECK 구문은 값을 비교해서
	참일 경우에만 이후 구문을 수행하게 된다.
	
Temporary Subroutine
	메인 메모리에서 동작하는 동적 서브루틴을 정의할 수 있다.
	
	GENERATE Subroutine POOL <itab> NAME <prog>.
	
	위 구문은 실행 중인 프로그램의 Main 메모리에 Subroutine POOL을 생성하게 된다.
	Subroutine Pool의 소스 코드를 <itab> 인터널 테이블에 삽입하며, 8자리 Type C의 <prog> 서브루틴 프로그램을 생성하게 된다.
	즉, 동적으로 서브루틴을 사용하고자 할 경우 서브루틴 풀(프로그램)을 생성해서 사용이 가능하다.
	이것은 인터널 테이블을 동적으로 선언해야 하는 경우 등에 아주 유용하게 사용된다.
	
	Ex) 사용자가 매출 금액을 기간을 설정해서 조회하는 프로그램이 있다고 가정하자.
		사용자는 동적으로 해당일을 선택할 수 있기 때문에 인터널 테이블의 칼럼 수를 미리 정의하기가 곤란
		이때 GENERATE 구문을 이용해서 입력된 일수만큼 인터널 테이블을 동적으로 선언이 가능하다.
		이 외에도 동적 인터널 테이블을 생성하는 방법은 여러가지가 있는데 서브루틴 풀은 생성된 프로그램이 실행된 상태에서만 존재하게 된다.
		하나의 프로그램에 36개까지 서브루틴 풀을 생성할 수 있음.
		에러가 발생하게 되면 SY-SUBRC = 8 이 RETURN 된다.
		
PERFORM ON COMMIT
	Subroutine을 호출할 때 ON COMMIT/ROLLBACK 옵션을 사용하면, COMMIT WORK 또는 ROLLBACK WORK 구문을 만날 때 FORM이 실행된다.
	
	• Using PERFORM ON COMMIT : COMMIT WORK를 만나면 서브루틴 구문을 호출한다.
	• Using PERFORM ON ROLLBACK : ROLLBACK WORK를 만나면 서브루틴 구문을 호출한다.